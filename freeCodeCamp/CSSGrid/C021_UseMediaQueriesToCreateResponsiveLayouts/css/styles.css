.item1 {
    background: LightSkyBlue;
    grid-area: header;
}

.item2 {
    background: LightSalmon;
    grid-area: advert;
}

.item3 {
    background: PaleTurquoise;
    grid-area: content;
}

.item4 {
    background: lightpink;
    grid-area: footer;
}

.container {
    font-size: 1.5em;
    min-height: 300px;
    width: 100%;
    background: LightGray;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 50px auto 1fr auto;
    grid-gap: 10px;
    grid-template-areas:
      "header"
      "advert"
      "content"
      "footer";
}

@media (min-width: 300px){
    .container{
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr auto;
      grid-template-areas:
        "advert header"
        "advert content"
        "advert footer";
    }
}

@media (min-width: 400px){
    .container{
      grid-template-areas:
      /* Cambia solo el código debajo de esta línea */
        "header header"
        "advert content"
        "footer footer";
      /* Cambia solo el código encima de esta línea */
    }
}

/*
    CSS Grid can be an easy way to make your site more responsive by using media queries to rearrange grid areas, change their dimensions, and rearrange element placement.

    In the preview, when the width of the viewport is 300px or more, the number of columns changes from 1 to 2.
    The ad area then occupies the entire left column.

    When the width of the viewport is 400px or more, make the header area fill the entire top row and the footer fill the entire bottom row.
*/
