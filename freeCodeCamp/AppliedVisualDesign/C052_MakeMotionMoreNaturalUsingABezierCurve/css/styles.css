.balls {
    border-radius: 50%;
    position: fixed;
    width: 50px;
    height: 50px;
    top: 60%;
    animation-name: jump;
    animation-duration: 2s;
    animation-iteration-count: infinite;
}
#red {
    background: red;
    left: 25%;
    animation-timing-function: linear;
}
#blue {
    background: blue;
    left: 50%;
    animation-timing-function: ease-out;
}
#green {
    background: green;
    left: 75%;
    animation-timing-function: cubic-bezier(0.311, 0.441, 0.444, 1.649);
}

@keyframes jump {
    50% {
        top: 10%;
    }
}

/*
    This challenge animates an element to replicate the motion of a bouncing ball.
    The above challenges will cover linear and ease-out cubic Bezier curves, however neither accurately represent bounce motion.
    You need to customize a Bezier curve for this.

    The animation-timing-function is performed automatically on every keyframe when the animation-iteration-count is set to infinity.
    Since there is a keyframe rule set to the middle of the animation duration (at 50%), it results in two identical animation progressions on the ball's up and down motion.

    The following cubic Bezier curve simulates bouncing motion:

    cubic-bezier(0.3, 0.4, 0.5, 1.6);

    Notice that the value of y2 is greater than 1.
    Although the cubic Bezier curve maps to a 1-by-1 coordinate system, and can only accept x-values ​​from 0 to 1, the y-value can be set to numbers greater than one .
    This results in a bouncing motion that is great for simulating the ball bouncing.

    Change the value of the element's animation-timing-function with the id of green to a cubic-bezier function with values ​​x1, y1, x2, y2 set respectively to 0.311, 0.441, 0.444, 1.649.
*/